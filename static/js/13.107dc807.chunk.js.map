{"version":3,"sources":["features/sign-in/components/SignInForm.js","features/sign-in/values/index.js","features/sign-in/containers/SignInFormContainer.js","features/sign-in/index.js"],"names":["SignInForm","values","touched","errors","isSubmitting","handleSubmit","handleChange","Form","onSubmit","noValidate","FormGroup","Label","for","Input","valid","address","type","name","id","placeholder","onChange","value","FormText","color","password","disabled","initialValues","validationSchema","object","shape","string","required","length","dispatchToProps","requestLogin","requestUser","connect","state","user","Selector","getUser","data","isLoading","isError","error","location","useLocation","useEffect","useCallback","Container","fluid","Row","className","Col","xl","sm","Alert","message","to","from","PROFILE","size","props","SignIn","SignInFormContainer"],"mappings":"8OAwEeA,EApDI,SAAC,GAAD,IACfC,EADe,EACfA,OACAC,EAFe,EAEfA,QACAC,EAHe,EAGfA,OACAC,EAJe,EAIfA,aACAC,EALe,EAKfA,aACAC,EANe,EAMfA,aANe,OAQf,kBAACC,EAAA,EAAD,CAAMC,SAAUH,EAAcI,YAAU,GACpC,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,IAAI,WAAX,WACA,kBAACC,EAAA,EAAD,CAAOC,MAAOZ,EAAQa,UAAYZ,EAAOY,QAASC,KAAK,OAAOC,KAAK,UAAUC,GAAG,UAAUC,YAAY,oBAAoBC,SAAUd,EAAce,MAAOpB,EAAOc,UAC/JZ,EAAOY,SAAW,kBAACO,EAAA,EAAD,CAAUC,MAAM,UAAUpB,EAAOY,UAExD,kBAACL,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,IAAI,YAAX,YACA,kBAACC,EAAA,EAAD,CAAOC,MAAOZ,EAAQsB,WAAarB,EAAOqB,SAAUR,KAAK,WAAWC,KAAK,WAAWC,GAAG,WAAWE,SAAUd,EAAce,MAAOpB,EAAOuB,WACtIrB,EAAOqB,UAAY,kBAACF,EAAA,EAAD,CAAUC,MAAM,UAAUpB,EAAOqB,WAE1D,kBAAC,IAAD,CAAoBR,KAAK,SAASS,SAAUrB,GAA5C,Y,SCrCFsB,EAAgB,CAClBX,QAAS,GACTS,SAAU,IAERG,EAAmBC,cAASC,MAAO,CACrCd,QAASe,cACJC,SAAS,wBACTC,OAAO,GAAI,iDAChBR,SAAUM,cAASC,SAAS,0B,yBCuG1BE,EAAkB,CACpBC,iBACAC,iBAGWC,eATS,SAACC,GAAD,MAAY,CAChCC,KAAMC,IAASC,QAAQH,MAQaJ,EAAzBG,EAxFA,SAAC,GAQR,IAPJF,EAOG,EAPHA,aACAC,EAMG,EANHA,YAMG,IALHG,KACIG,EAID,EAJCA,KACAC,EAGD,EAHCA,UACAC,EAED,EAFCA,QACAC,EACD,EADCA,MAEEC,EAAWC,cAEjBC,qBAAU,WACDN,GACDN,MAEL,CAACM,EAAMN,IAEV,IAAM3B,EAAWwC,uBAAY,SAAC/C,GAC1BiC,EAAa,CAAEO,KAAMxC,MACtB,CAACiC,IAEJ,OAAIS,EAEI,kBAACM,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACC,EAAA,EAAD,CAAKC,UAAU,kEACX,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,IACb,kBAACC,EAAA,EAAD,CAAOjC,MAAM,UAAWqB,GAASA,EAAMa,SAAY,mCAOnEhB,EACO,kBAAC,IAAD,CAAUiB,GAAKb,EAASR,OAASQ,EAASR,MAAMsB,MAASC,MAGhElB,EAEI,kBAACO,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACC,EAAA,EAAD,CAAKC,UAAU,kEACX,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GACZ,kBAAC,IAAD,CAAeM,KAAK,aAQpC,kBAACV,EAAA,EAAD,CAAKC,UAAU,0BACX,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,IACZ,kBAAC,IAAD,CACI7B,cAAeA,EACfC,iBAAkBA,EAClBnB,SAAUA,IAET,SAAAsD,GAAK,OAAI,kBAAC,EAAeA,WCjF/BC,UAFA,kBAAM,kBAACC,EAAD","file":"static/js/13.107dc807.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Form, FormGroup, Label, Input, FormText } from 'reactstrap';\n\nimport { StyledFilledButton } from '../../../shared/styled';\n\n/**\n * Login form.\n *\n * @param values\n * @param touched\n * @param errors\n * @param isSubmitting\n * @param handleSubmit\n * @param handleChange\n * @returns {JSX.Element}\n * @constructor\n * @component\n */\nconst SignInForm = ({\n    values,\n    touched,\n    errors,\n    isSubmitting,\n    handleSubmit,\n    handleChange\n}) => (\n    <Form onSubmit={handleSubmit} noValidate>\n        <FormGroup>\n            <Label for=\"address\">Address</Label>\n            <Input valid={touched.address && !errors.address} type=\"text\" name=\"address\" id=\"address\" placeholder=\"0xa1b2c3d4e5f6...\" onChange={handleChange} value={values.address}/>\n            {errors.address && <FormText color=\"danger\">{errors.address}</FormText>}\n        </FormGroup>\n        <FormGroup>\n            <Label for=\"password\">Password</Label>\n            <Input valid={touched.password && !errors.password} type=\"password\" name=\"password\" id=\"password\" onChange={handleChange} value={values.password}/>\n            { errors.password && <FormText color=\"danger\">{errors.password}</FormText>}\n        </FormGroup>\n        <StyledFilledButton type=\"submit\" disabled={isSubmitting}>\n            Accedi\n        </StyledFilledButton>\n    </Form>\n);\n\nSignInForm.propTypes = {\n    /**\n     * Form values\n     */\n    values: PropTypes.object,\n    /**\n     * Touched fields\n     */\n    touched: PropTypes.object,\n    /**\n     * Errors in fields\n     */\n    errors: PropTypes.object,\n    /**\n     * Form submission\n     */\n    isSubmitting: PropTypes.bool,\n    /**\n     * Form submission handling\n     */\n    handleSubmit: PropTypes.func,\n    /**\n     * Field changes handling\n     */\n    handleChange: PropTypes.func\n}\n\nexport default SignInForm;\n","import { object, string } from 'yup';\n\nconst initialValues = {\n    address: '',\n    password: ''\n};\nconst validationSchema = object().shape(({\n    address: string()\n        .required('Inserire l\\'indirizzo')\n        .length(42, 'L\\'address è lungo esattamente 42 caratteri'),\n    password: string().required('Inserire la password')\n}));\n\nexport { initialValues, validationSchema };\n","import React, { useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect, useLocation } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { Formik } from 'formik';\nimport { Row, Col, Container, Alert } from 'reactstrap';\n\nimport SignInForm from '../components';\nimport { StyledSpinner } from '../../../shared/styled';\n\nimport { initialValues, validationSchema } from '../values';\nimport { PROFILE } from '../../../config/routes';\n\nimport { requestLogin, requestUser } from '../../../store/user/action';\nimport { Selector } from '../../../store/user/reducer';\n\n/**\n * Login handling.\n *\n * @param requestLogin\n * @param requestUser\n * @param data\n * @param isLoading\n * @param isError\n * @param error\n * @returns {JSX.Element}\n * @constructor\n * @component\n */\nconst SignIn = ({\n    requestLogin,\n    requestUser,\n    user: {\n        data,\n        isLoading,\n        isError,\n        error\n}}) => {\n    const location = useLocation();\n\n    useEffect(() => {\n        if (!data) {\n            requestUser();\n        }\n    }, [data, requestUser]);\n\n    const onSubmit = useCallback((values) => {\n        requestLogin({ data: values });\n    }, [requestLogin]);\n\n    if (isError) {\n        return (\n            <Container fluid>\n                <Row className=\"justify-content-center align-content-center align-items-center\">\n                    <Col xl={10} sm={10}>\n                        <Alert color=\"danger\">{(error && error.message) || 'Si è verificato un errore'}</Alert>\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n\n    if (data) {\n        return <Redirect to={(location.state && location.state.from) || PROFILE} />\n    }\n\n    if (isLoading) {\n        return (\n            <Container fluid>\n                <Row className=\"justify-content-center align-content-center align-items-center\">\n                    <Col xl={1} sm={1}>\n                        <StyledSpinner size=\"large\"/>\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n\n    return (\n        <Row className=\"justify-content-center\">\n            <Col xl={6} sm={10}>\n                <Formik\n                    initialValues={initialValues}\n                    validationSchema={validationSchema}\n                    onSubmit={onSubmit}\n                >\n                    {props => <SignInForm {...props}/>}\n                </Formik>\n            </Col>\n        </Row>\n    );\n};\n\nSignIn.propTypes = {\n    /**\n     * REQUEST_USER action dispatching\n     */\n    requestUser: PropTypes.func,\n    /**\n     * REQUEST_LOGIN action dispatching\n     */\n    requestLogin: PropTypes.func,\n    /**\n     * Current user data\n     */\n    user: PropTypes.object\n};\n\nconst mapStateToProps = (state) => ({\n    user: Selector.getUser(state)\n});\n\nconst dispatchToProps = {\n    requestLogin,\n    requestUser\n};\n\nexport default connect(mapStateToProps, dispatchToProps)(SignIn);\n","import React from 'react';\n\nimport SignInFormContainer from './containers'\n\nconst SignIn = () => <SignInFormContainer />\n\nexport default SignIn;\n"],"sourceRoot":""}