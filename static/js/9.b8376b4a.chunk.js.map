{"version":3,"sources":["features/certify/components/CertifyForm.js","features/certify/map/index.js","features/certify/container/CertifyFormContainer.js","features/certify/index.js","shared/values/index.js","shared/auth/index.js","shared/element-dropdown/ElementSelector.js"],"names":["ProductActivitiesForm","values","touched","errors","isSubmitting","handleSubmit","handleChange","Form","onSubmit","noValidate","FormGroup","Label","for","Input","valid","object","type","name","id","onChange","value","FormText","color","description","disabled","initialValues","validationSchema","shape","number","required","string","CertifyFormContainer","useState","PRODUCT","currentForm","setCurrentForm","useCallback","setSubmitting","resetForm","setTimeout","Container","fluid","Row","className","Col","md","elements","PROD_ACTIVITIES","currentElement","setCurrentElement","props","CertifyForm","withAuthentication","LAND","PORTION","MAINTENANCE_ACTIVITIES","roles","AuthComponent","connect","state","user","Selector","getUser","loggedIn","data","useEffect","Auth","currentUserInfo","then","catch","error","console","to","SIGNIN","ElementSelector","isOpen","setIsOpen","toggle","onClick","choices","useMemo","Object","keys","map","index","DropdownItem","key","Dropdown","DropdownToggle","caret","block","DropdownMenu"],"mappings":"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","file":"static/js/9.b8376b4a.chunk.js","sourcesContent":["import React from 'react';\nimport { Form, FormGroup, FormText, Input, Label } from 'reactstrap';\n\nimport { StyledFilledButton } from '../../../shared/styled';\n\nconst ProductActivitiesForm = ({\n   values,\n   touched,\n   errors,\n   isSubmitting,\n   handleSubmit,\n   handleChange\n}) => (\n\t<Form onSubmit={handleSubmit} noValidate>\n\t\t<FormGroup>\n\t\t\t<Label for=\"portion\">Oggetto della certificazione</Label>\n\t\t\t<Input valid={touched.object && !errors.object} type=\"number\" name=\"object\" id=\"object\" onChange={handleChange} value={values.object}/>\n\t\t\t{ errors.object && <FormText color=\"danger\">{errors.object}</FormText>}\n\t\t</FormGroup>\n\t\t<FormGroup>\n\t\t\t<Label for=\"description\">Descrizione</Label>\n\t\t\t<Input valid={\n\t\t\t\ttouched.description && !errors.description} type=\"textarea\" name=\"description\" id=\"description\" onChange={handleChange} value={values.description}/>\n\t\t\t{ errors.description && <FormText color=\"danger\">{errors.description}</FormText>}\n\t\t</FormGroup>\n\t\t<StyledFilledButton type=\"submit\" disabled={isSubmitting}>\n\t\t\tCertifica\n\t\t</StyledFilledButton>\n\t</Form>\n);\n\nexport default ProductActivitiesForm;\n","import { number, string, object } from 'yup';\n\nconst initialValues = {\n\tobject: '',\n\tdescription: ''\n};\n\nconst validationSchema = object().shape({\n\tobject: number().required('Specificare l\\'oggetto della certificazione'),\n\tdescription: string().required('La descrizione della certificazione è obbligatoria')\n});\n\nexport {\n\tinitialValues,\n\tvalidationSchema\n}\n","import React, { useState, useCallback } from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport { Formik } from 'formik';\n\nimport { CertifyForm } from '../components';\nimport { ElementSelector } from '../../../shared/element-dropdown';\n\nimport { initialValues, validationSchema } from '../map';\nimport { PROD_ACTIVITIES, PRODUCT } from '../../../shared/values';\n\nconst CertifyFormContainer = () => {\n\tconst [currentForm, setCurrentForm] = useState(PRODUCT);\n\n\tconst onSubmit = useCallback((values, { setSubmitting, resetForm }) => {\n\t\t// TODO: handle upload using s3 and redux-saga\n\t\tsetTimeout(() => {\n\t\t\tsetSubmitting(false);\n\t\t\tresetForm();\n\t\t}, 2500);\n\t}, []);\n\n\treturn (\n\t\t<Container fluid>\n\t\t\t<Row className=\"justify-content-between align-items-center\">\n\t\t\t\t<Col>\n\t\t\t\t\t<h1>Certifica {currentForm}</h1>\n\t\t\t\t</Col>\n\t\t\t\t<Col md={5} className=\"justify-content-center\">\n\t\t\t\t\t<ElementSelector\n\t\t\t\t\t\telements={[\n\t\t\t\t\t\t\tPRODUCT,\n\t\t\t\t\t\t\tPROD_ACTIVITIES\n\t\t\t\t\t\t]}\n\t\t\t\t\t\tcurrentElement={currentForm}\n\t\t\t\t\t\tsetCurrentElement={setCurrentForm}\n\t\t\t\t\t/>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Row>\n\t\t\t\t<Col md={12}>\n\t\t\t\t\t<Formik\n\t\t\t\t\t\tinitialValues={initialValues}\n\t\t\t\t\t\tvalidationSchema={validationSchema}\n\t\t\t\t\t\tonSubmit={onSubmit}\n\t\t\t\t\t>\n\t\t\t\t\t\t{props => <CertifyForm {...props}/>}\n\t\t\t\t\t</Formik>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t</Container>\n\n\t);\n}\n\nexport default CertifyFormContainer;\n","import React from 'react';\n\nimport CertifyFormContainer from './container';\nimport withAuthentication from '../../shared/auth';\n\nconst Certify = () => <CertifyFormContainer />\n\nexport default withAuthentication(Certify);\n","const LAND = 'Terreno';\nconst PORTION = 'Porzione di terreno';\nconst PROD_ACTIVITIES = 'Attività legate alla produzione';\nconst PRODUCT = 'Prodotto';\nconst MAINTENANCE_ACTIVITIES = 'Attività di manutenzione';\n\nconst ADMIN = 'Amministratore';\nconst CERTIFIER = 'Certificatore';\nconst OPERATOR = 'Operatore';\nconst USER = 'Utente';\n\nconst roles = [\n\tUSER,\n\tCERTIFIER,\n\tOPERATOR\n]\n\nexport {\n\tLAND,\n\tPORTION,\n\tPROD_ACTIVITIES,\n\tPRODUCT,\n\tMAINTENANCE_ACTIVITIES,\n\tADMIN,\n\tCERTIFIER,\n\tOPERATOR,\n\tUSER,\n\troles\n};\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport Auth from '@aws-amplify/auth';\n\nimport { SIGNIN } from '../../config/routes';\n\nimport { loggedIn } from '../../store/user/action';\nimport { Selector } from '../../store/user/reducer';\n\nconst withAuthentication = (AuthComponent) =>\n    connect((state) => ({ user: Selector.getUser(state) }), { loggedIn })(\n        ({ loggedIn, user: { data }}) => {\n            useEffect(() => {\n                if (!data) {\n                    Auth.currentUserInfo()\n                        .then((user) => {\n                            loggedIn({ data: user });\n                        })\n                        .catch((error) => console.error(error));\n                }\n            }, [loggedIn, data]);\n\n            if (data) {\n                return <AuthComponent />;\n            } else {\n                return <Redirect to={SIGNIN} />\n            }\n        });\n\nexport default withAuthentication;\n","import React, { useState, useCallback, useMemo } from 'react';\n\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\n\nconst ElementSelector = ({ elements, currentElement, setCurrentElement }) => {\n\tconst [isOpen, setIsOpen] = useState(false);\n\n\tconst toggle = useCallback(() => setIsOpen((isOpen) => !isOpen), [setIsOpen]);\n\tconst onClick = useCallback((value) => () => {\n\t\tsetCurrentElement(value);\n\t}, [setCurrentElement]);\n\n\tconst choices = useMemo(() => {\n\t\treturn Object.keys(elements).map((value, index) =>\n\t\t\t<DropdownItem onClick={onClick(elements[value])} key={index}>{elements[value]}</DropdownItem>\n\t\t)\n\t}, [onClick, elements]);\n\n\treturn (\n\t\t<Dropdown\n\t\t\tisOpen={isOpen}\n\t\t\ttoggle={toggle}\n\t\t>\n\t\t\t<DropdownToggle caret block>\n\t\t\t\t{currentElement}\n\t\t\t</DropdownToggle>\n\t\t\t<DropdownMenu>\n\t\t\t\t{choices}\n\t\t\t</DropdownMenu>\n\t\t</Dropdown>\n\t)\n};\n\nexport default ElementSelector;\n"],"sourceRoot":""}