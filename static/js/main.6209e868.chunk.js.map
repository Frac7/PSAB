{"version":3,"sources":["config/routes/index.js","App.js","shared/header/data/index.js","shared/header/components/Header.js","Root.js","serviceWorker.js","index.js","shared/styled/index.js"],"names":["Profile","lazy","Admin","Discover","Certify","Register","SignIn","SignOut","PROFILE","REGISTER","CERTIFY","DISCOVER","SIGNIN","routes","path","component","App","Container","fluid","style","margin","Row","className","Col","md","fallback","size","map","index","key","menu","route","label","Header","pathname","useLocation","dark","expand","Nav","navbar","width","offset","NavItem","active","NavLink","to","icon","faUser","color","Root","Boolean","window","location","hostname","match","addEventListener","ethereum","enable","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","StyledNavbar","styled","Navbar","StyledFilledButton","Button","StyledSpinner","Spinner"],"mappings":"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","file":"static/js/main.6209e868.chunk.js","sourcesContent":["import { lazy } from 'react';\n\nconst Profile =  lazy(() => import('../../features/profile'));\nconst Admin =  lazy(() => import('../../features/admin'));\nconst Discover =  lazy(() => import('../../features/discover'));\nconst Certify =  lazy(() => import('../../features/certify'));\nconst Register =  lazy(() => import('../../features/register'));\nconst SignIn =  lazy(() => import('../../features/sign-in'));\nconst SignOut =  lazy(() => import('../../features/sign-out'));\n\nconst PROFILE = '/profile';\nconst REGISTER = '/register';\nconst CERTIFY = '/certify';\nconst DISCOVER = '/discover';\nconst SIGNIN = '/sign-in';\nconst SIGNOUT = '/sign-out';\nconst ADMIN = '/admin'\n\nconst routes = [\n\t{\n\t\tpath: PROFILE,\n\t\tcomponent: Profile\n\t},\n\t{\n\t\tpath: REGISTER,\n\t\tcomponent: Register\n\t},\n\t{\n\t\tpath: CERTIFY,\n\t\tcomponent: Certify\n\t},\n\t{\n\t\tpath: DISCOVER,\n\t\tcomponent: Discover\n\t},\n\t{\n\t\tpath: SIGNIN,\n\t\tcomponent: SignIn\n\t},\n\t{\n\t\tpath: SIGNOUT,\n\t\tcomponent: SignOut\n\t},\n\t{\n\t\tpath: ADMIN,\n\t\tcomponent: Admin\n\t}\n];\n\nexport default routes;\n\nexport { PROFILE, REGISTER, CERTIFY, DISCOVER, SIGNOUT, ADMIN, SIGNIN };\n","import React, { Suspense } from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport { Container, Row, Col } from 'reactstrap';\n\nimport { StyledSpinner } from './shared/styled';\n\nimport routes from './config/routes';\n\nconst App = () => {\n\treturn (\n\t\t<Container fluid style={{ margin: '2rem 0' }}>\n\t\t\t<Row className=\"justify-content-center\">\n\t\t\t\t<Col md={8}>\n\t\t\t\t\t<Suspense fallback={<StyledSpinner size=\"large\"/>}>\n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t{ routes.map(({ path, component }, index) =>\n\t\t\t\t\t\t\t\t<Route key={index} path={path} component={component}>\n\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Switch>\n\t\t\t\t\t</Suspense>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t</Container>\n\t)\n}\n\nexport default App;\n","import { REGISTER, CERTIFY, DISCOVER } from '../../../config/routes';\n\nconst menu = [\n\t{\n\t\troute: REGISTER,\n\t\tlabel:'Registra'\n\t},\n\t{\n\t\troute: CERTIFY,\n\t\tlabel: 'Certifica'\n\t},\n\t{\n\t\troute: DISCOVER,\n\t\tlabel: 'Scopri'\n\t}\n]\n\nexport { menu };\n","import React from 'react';\nimport { useLocation, Link } from 'react-router-dom';\n\nimport { Nav, NavItem, NavLink, Container, Row, Col } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUser } from '@fortawesome/free-solid-svg-icons/faUser';\n\nimport { StyledNavbar } from '../../styled';\n\nimport { menu } from '../data';\nimport { PROFILE } from '../../../config/routes';\n\nconst Header = () => {\n\tconst { pathname } = useLocation();\n\n\treturn (\n\t\t<header>\n\t\t\t<StyledNavbar dark expand>\n\t\t\t\t<Nav navbar style={{ width: '100%' }}>\n\t\t\t\t\t<Container fluid>\n\t\t\t\t\t\t<Row md={4} style={{ width: '100%' }}>\n\t\t\t\t\t\t\t{ menu.map(({ route, label }, index) =>\n\t\t\t\t\t\t\t\t<Col md={{ size: 2, offset: index ? 0 : 2 }} key={index}>\n\t\t\t\t\t\t\t\t\t<NavItem active={pathname === route}>\n\t\t\t\t\t\t\t\t\t\t<Link component={NavLink} to={route}>{label}</Link>\n\t\t\t\t\t\t\t\t\t</NavItem>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t<Col md={{ size: 2, offset: 2 }}>\n\t\t\t\t\t\t\t\t<NavItem active={pathname === PROFILE}>\n\t\t\t\t\t\t\t\t\t<Link component={NavLink} to={PROFILE}>\n\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faUser} color=\"inherit\" size=\"lg\" />\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</NavItem>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</Container>\n\t\t\t\t</Nav>\n\t\t\t</StyledNavbar>\n\t\t</header>\n\t)\n}\n\nexport default Header;\n","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\n\nimport App from './App';\nimport { Header } from './shared/header';\n\nconst Root = () => {\n\treturn (\n\t\t<HashRouter>\n\t\t\t<Header />\n\t\t\t<App />\n\t\t</HashRouter>\n\t);\n}\n\nexport default Root;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// eslint-disable-next-line\nimport Web3 from 'web3';\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Root from './Root';\nimport * as serviceWorker from './serviceWorker';\n\nwindow.addEventListener('load', () => {\n    window.ethereum.enable(\n\t\tReactDOM.render(\n\t\t\t<Root />,\n\t\t\tdocument.getElementById('root')\n\t\t)\n\t);\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import styled from 'styled-components';\n\nimport { Navbar, Button, Spinner } from 'reactstrap';\n\nconst StyledNavbar = styled(Navbar)`\n\tbackground-color: #006D77 !important;\n`\n\nconst StyledFilledButton = styled(Button)`\n\tbackground-color: #006D77 !important;\n\n\t&:hover {\n\t\tbackground-color: #005059 !important;\n\t}\n\n\t&:active {\n\t\tbackground-color: #005059 !important;\n\t}\n\n\t&:focus {\n\t\tbackground-color: #005059 !important;\n\t}\n`\n\nconst StyledSpinner = styled(Spinner)`\n\tcolor: #006D77;\n`\n\nexport { StyledNavbar, StyledFilledButton, StyledSpinner };\n"],"sourceRoot":""}