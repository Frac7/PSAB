{"version":3,"sources":["features/sign-in/components/SignInForm.js","features/sign-in/values/index.js","features/sign-in/containers/SignInFormContainer.js","features/sign-in/index.js"],"names":["SignInForm","values","touched","errors","isSubmitting","handleSubmit","handleChange","Form","onSubmit","noValidate","FormGroup","Label","for","Input","valid","email","type","name","id","placeholder","onChange","value","FormText","color","password","disabled","userPool","CognitoUserPool","UserPoolId","process","ClientId","initialValues","validationSchema","object","shape","string","required","SignIn","history","useEffect","window","localStorage","getItem","push","PROFILE","useCallback","setSubmitting","setErrors","authDetails","AuthenticationDetails","Username","Password","cognitoUser","CognitoUser","Pool","authenticateUser","onSuccess","result","console","log","setItem","JSON","stringify","onFailure","error","message","newPasswordRequired","data","completeNewPasswordChallenge","this","Row","Col","md","size","offset","props","SignInFormContainer"],"mappings":"kNA+BeA,EAzBI,SAAC,GAAD,IACfC,EADe,EACfA,OACAC,EAFe,EAEfA,QACAC,EAHe,EAGfA,OACAC,EAJe,EAIfA,aACAC,EALe,EAKfA,aACAC,EANe,EAMfA,aANe,OAQf,kBAACC,EAAA,EAAD,CAAMC,SAAUH,EAAcI,YAAU,GACpC,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,IAAI,SAAX,UACA,kBAACC,EAAA,EAAD,CAAOC,MAAOZ,EAAQa,QAAUZ,EAAOY,MAAOC,KAAK,QAAQC,KAAK,QAAQC,GAAG,QAAQC,YAAY,mBAAmBC,SAAUd,EAAce,MAAOpB,EAAOc,QACtJZ,EAAOY,OAAS,kBAACO,EAAA,EAAD,CAAUC,MAAM,UAAUpB,EAAOY,QAEvD,kBAACL,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,IAAI,YAAX,YACA,kBAACC,EAAA,EAAD,CAAOC,MAAOZ,EAAQa,QAAUZ,EAAOqB,SAAUR,KAAK,WAAWC,KAAK,WAAWC,GAAG,WAAWE,SAAUd,EAAce,MAAOpB,EAAOuB,WACnIrB,EAAOqB,UAAY,kBAACF,EAAA,EAAD,CAAUC,MAAM,UAAUpB,EAAOqB,WAE1D,kBAAC,IAAD,CAAoBR,KAAK,SAASS,SAAUrB,GAA5C,Y,SCtBFsB,EAAW,IAAIC,IAAgB,CACjCC,WAAYC,sBACZC,SAAUD,+BAGRE,EAAgB,CAClBhB,MAAO,GACPS,SAAU,IAERQ,EAAmBC,cAASC,MAAO,CACrCnB,MAAOoB,cAASpB,MAAM,qBAAqBqB,SAAS,qBACpDZ,SAAUW,cAASC,SAAS,0B,QCgDjBC,EAhDA,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACdC,qBAAU,WACOC,OAAOC,aAAaC,QAAQ,aAGrCJ,EAAQK,KAAKC,OAElB,CAACN,IAEJ,IAAM9B,EAAWqC,uBAAY,cAAwD,IAArD9B,EAAoD,EAApDA,MAAOS,EAA6C,EAA7CA,SAAcsB,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UAC1DC,EAAc,IAAIC,IAAsB,CAAEC,SAAUnC,EAAOoC,SAAU3B,IACrE4B,EAAc,IAAIC,IAAY,CAAEH,SAAUnC,EAAOuC,KAAM5B,IAE7D0B,EAAYG,iBAAiBP,EAAa,CACtCQ,UADsC,SAC5BC,GACNC,QAAQC,IAAIF,GACZjB,OAAOC,aAAamB,QAAQ,WAAYC,KAAKC,UAAUL,IACvDX,GAAc,GACdR,EAAQK,KAAKC,MAGjBmB,UARsC,SAQ5BC,GACNN,QAAQM,MAAMA,GACdlB,GAAc,GACdC,EAAU,CAAEvB,SAAUwC,EAAMC,WAEhCC,oBAbsC,SAalBC,GAChBT,QAAQC,IAAIQ,GACZf,EAAYgB,6BAA6B5C,EAAU,KAAM6C,WAGlE,CAAC/B,IAEJ,OACI,kBAACgC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IACxB,kBAAC,IAAD,CACI3C,cAAeA,EACfC,iBAAkBA,EAClBxB,SAAUA,IAET,SAAAmE,GAAK,OAAI,kBAAC,EAAeA,SCjD/BtC,UAFA,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,kBAACsC,EAAD,CAAqBtC,QAASA","file":"static/js/9.ec398349.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Form, FormGroup, Label, Input, FormText } from 'reactstrap';\n\nimport { StyledFilledButton } from '../../../shared/styled';\n\nconst SignInForm = ({\n    values,\n    touched,\n    errors,\n    isSubmitting,\n    handleSubmit,\n    handleChange\n}) => (\n    <Form onSubmit={handleSubmit} noValidate>\n        <FormGroup>\n            <Label for=\"email\">E-mail</Label>\n            <Input valid={touched.email && !errors.email} type=\"email\" name=\"email\" id=\"email\" placeholder=\"user@example.com\" onChange={handleChange} value={values.email}/>\n            { errors.email && <FormText color=\"danger\">{errors.email}</FormText>}\n        </FormGroup>\n        <FormGroup>\n            <Label for=\"password\">Password</Label>\n            <Input valid={touched.email && !errors.password} type=\"password\" name=\"password\" id=\"password\" onChange={handleChange} value={values.password}/>\n            { errors.password && <FormText color=\"danger\">{errors.password}</FormText>}\n        </FormGroup>\n        <StyledFilledButton type=\"submit\" disabled={isSubmitting}>\n            Accedi\n        </StyledFilledButton>\n    </Form>\n)\n\nexport default SignInForm;","import { CognitoUserPool } from 'amazon-cognito-identity-js';\nimport { object, string } from 'yup';\n\nconst userPool = new CognitoUserPool({\n    UserPoolId: process.env.REACT_APP_COGNITO_USER_POOL_ID,\n    ClientId: process.env.REACT_APP_COGNITO_CLIENT_ID\n});\n\nconst initialValues = { \n    email: '', \n    password: '' \n};\nconst validationSchema = object().shape(({ \n    email: string().email('E-mail non valida').required('Inserire l\\'e-mail'), \n    password: string().required('Inserire la password') \n}));\n\nexport { userPool, initialValues, validationSchema };","import React, { useCallback, useEffect } from 'react';\n\nimport {\n    AuthenticationDetails,\n    CognitoUser\n  } from \"amazon-cognito-identity-js\";\nimport { Formik } from 'formik';\nimport { Row, Col } from 'reactstrap';\n\nimport SignInForm from '../components';\n\nimport { userPool, initialValues, validationSchema } from '../values';\nimport { PROFILE } from '../../../config/routes';\n\nconst SignIn = ({ history }) => {\n    useEffect(() => {\n        const auth = window.localStorage.getItem('LoggedIn');\n\n        if (auth) {\n            history.push(PROFILE);\n        }\n    }, [history]);\n\n    const onSubmit = useCallback(({ email, password }, { setSubmitting, setErrors }) => {\n        const authDetails = new AuthenticationDetails({ Username: email, Password: password });\n        const cognitoUser = new CognitoUser({ Username: email, Pool: userPool });\n\n        cognitoUser.authenticateUser(authDetails, {\n            onSuccess(result) {\n                console.log(result);\n                window.localStorage.setItem('LoggedIn', JSON.stringify(result));\n                setSubmitting(false);\n                history.push(PROFILE);\n\n            },\n            onFailure(error) {\n                console.error(error);\n                setSubmitting(false);\n                setErrors({ password: error.message });\n            },\n            newPasswordRequired(data) {\n                console.log(data);\n                cognitoUser.completeNewPasswordChallenge(password, null, this);\n            }\n        });\n    }, [history]);\n\n    return (\n        <Row>\n            <Col md={{ size: 6, offset: 3 }}>\n                <Formik\n                    initialValues={initialValues}\n                    validationSchema={validationSchema}\n                    onSubmit={onSubmit}\n                >\n                    {props => <SignInForm {...props}/>}\n                </Formik>\n            </Col>\n        </Row>\n    );\n}\n\nexport default SignIn;\n","import React from 'react';\n\nimport SignInFormContainer from './containers'\n\nconst SignIn = ({ history }) => <SignInFormContainer history={history} />\n\nexport default SignIn;\n"],"sourceRoot":""}